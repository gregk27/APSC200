function [allData, scenario, sensors] = City()
%City - Returns sensor detections
%    allData = City returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = City optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 10-Apr-2021 23:45:05

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
        process(scenario, objectDetections, ptClouds, egoVehicle, 'city')
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = lidarPointCloudGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [0.95 0], ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [1.5 0], ...
    'Yaw', -30, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([300 300],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 2;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [37.2 40.4 0;
    60.3 40.4 0];
road(scenario, roadCenters, 'Name', 'Road');

roadCenters = [60 43.4 0;
    60 -30 0];
road(scenario, roadCenters, 'Name', 'Road1');

roadCenters = [40.1 21.8 0;
    40.1 40.2 0];
road(scenario, roadCenters, 'Name', 'Road2');

roadCenters = [57.2 20 0;
    -8.6 20 0];
road(scenario, roadCenters, 'Name', 'Road3');

roadCenters = [19.5 20.3 0;
    19.5 -20 0];
road(scenario, roadCenters, 'Name', 'Road4');

roadCenters = [-10 -20 0;
    63 -20 0];
road(scenario, roadCenters, 'Name', 'Road5');

roadCenters = [-10 -23 0;
    -10 23.1 0];
road(scenario, roadCenters, 'Name', 'Road6');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-5.44 18.63 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-5.08 18.7 0.01;
    1.9 18.72 0.01;
    38.09 18.64 0.01;
    53.73 18.76 0.01;
    58.73 19.33 0.01;
    61.03 23.01 0.01;
    61.58 30.95 0.01;
    61.49 35.86 0.01;
    60.55 40.55 0.01;
    56.04 41.31 0.01;
    43.03 41.31 0.01;
    41.68 41.02 0.01;
    38.99 34.28 0.01;
    39.16 26.84 0.01;
    42.85 19.92 0.01;
    46.67 19.24 0.01;
    55.66 19.14 0.01;
    57.76 19.34 0.01;
    59.27 16.93 0.01;
    59.14 12.31 0.01;
    59.18 1.31 0.01;
    59.55 -13.15 0.01;
    58.73 -17.2 0.01;
    50.61 -19.52 0.01;
    40.58 -19.39 0.01;
    32.68 -19.26 0.01;
    23.89 -18.48 0.01;
    21.68 -17.74 0.01;
    20.14 -12.67 0.01;
    20.24 1.53 0.01;
    20.24 6.47 0.01;
    20.46 11.86 0.01;
    20.28 17.57 0.01;
    17.25 20.18 0.01;
    9.86 21.09 0.01;
    -4.85 20.61 0.01;
    -9.55 18.72 0.01;
    -10.92 11.51 0.01;
    -10.78 -2.09 0.01;
    -10.78 -13.2 0.01;
    -10.1 -20 0;
    -4.09 -21.2 0.01;
    13.22 -20.9 0.01];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [50.1 10 0], ...
    'Name', 'Building');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [48.23 16.78 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [39.67 16.59 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'IGAS 824');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [30 10 0], ...
    'Name', 'Building1');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [50.3 30.2 0], ...
    'Name', 'Building2');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [30.1 30.1 0], ...
    'Name', 'Building3');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [50.1 -9.8 0], ...
    'Name', 'Building4');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [30.2 -9.6 0], ...
    'Name', 'Building5');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [22.6 4.6 0], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', '537 LKAB');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [22.6 -8.6 0], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', '508 XRHK');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [11.5 23.3 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'VFQV 401');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [4.9 23.3 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', '109 FBMJ');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-2 23.2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'KGDQ 642');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-13.1 0.4 0], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'RXVO 473');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [5.2 10.3 0], ...
    'Name', 'Building6');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [10.3 -9.8 0], ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Building7');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 50, ...
    'Position', [0 -9.7 0], ...
    'Name', 'Building8');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [53.2133333333333 -16.62 0.01], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'YEUE 107');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [46.1166666666667 -16.55 0.01], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '578 OEQE');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [38.84 -16.56 0], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '492 QUWQ');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [32.0633333333333 -16.49 0.01], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'IRET 320');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [10.2266666666667 -23.4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '784 WOIR');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [4.00999999999998 -23.42 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'TQYR 686');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-2.39666666666668 -23.44 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'QIPT 135');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [56.9866666666667 6.39 0], ...
    'Yaw', -90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '657 UPRT');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [57.08 -0.490000000000001 0], ...
    'Yaw', -90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', '433 WWUT');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [57.1533333333333 -7.99 0], ...
    'Yaw', -90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'QIQP 063');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [47.27 44.07 0.01], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '656 TYEQ');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [55.09 44.1 0], ...
    'Yaw', -180, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'IPTO 211');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [48.8433333333333 37.25 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'QPTU 072');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-12.9566666666667 -3.71 0.01], ...
    'Yaw', -90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [63.5366666666667 17.1 0], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', '800 UPYO');

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [55.96 21.52 0.01], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0 255 0] / 255, ...
    'Name', 'Truck');
waypoints = [55.96 21.52 0.01;
    37.79 21.66 0.01;
    25.42 21.14 0.01;
    22.99 20.73 0.01;
    20.49 18.65 0.01;
    17.94 12.57 0.01;
    17.42 3.63 0.01;
    18.13 -11.74 0.01;
    18.23 -15.12 0.01;
    21.5 -19.29 0.01;
    26.97 -20.58 0.01;
    51.8 -21.4 0;
    57.8 -19.1 0;
    61.1 -13.1 0;
    62 -2.9 0;
    61.85 26.78 0.01;
    62.05 35.23 0.01;
    60.67 38.18 0.01;
    53.59 41.19 0.01;
    41.76 38.68 0.01;
    39.31 32.74 0.01;
    39.25 26.85 0.01;
    38.18 22.81 0.01;
    32.28 21.29 0.01;
    23.06 20.72 0.01;
    20.44 18.6 0.01;
    17.94 12.57 0.01;
    17.42 3.63 0.01;
    17.6 -8.05 0.01];
speed = [27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;27;0;27;27;27;27;27;27;27];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.15;0;0;0;0;0;0;0];
trajectory(truck, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
else
    output = 'Objects only';
end

