function [allData, scenario, sensors] = grace_sLongAssRoad()
%grace_sLongAssRoad - Returns sensor detections
%    allData = grace_sLongAssRoad returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = grace_sLongAssRoad optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 01-Apr-2021 22:45:58

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
        process(scenario, objectDetections, ptClouds, egoVehicle);
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = lidarPointCloudGenerator('SensorIndex', 1, ...
    'SensorLocation', [0.95 0], ...
    'EgoVehicleActorID', 5, ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.5 0], ...
    'Yaw', -30, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([300 300],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 2;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('StopTime', 20);

% Add all road segments
roadCenters = [-217.83 -0.53 0;
    214.97 0.27 0];
laneSpecification = lanespec(4);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the actors
truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [21.3 1.6 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [21.3 1.6 0;
    -41.8 2.1 0;
    -217.5 1.8 0];
speed = [-5;-5;-5];
trajectory(truck, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [28.72 -8.48 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'ZLMR 487');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [60.96 8.25 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255, ...
    'Name', 'Car1');

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [95.4 2.19 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [95.4 2.19 0.01;
    -141.8 2.3 0;
    -215.7 1.4 0];
speed = [-5;-5;-5];
trajectory(car2, waypoints, speed);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-214.2 -6 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 114 189] / 255, ...
    'Name', 'Car3');
waypoints = [-214.2 -6 0;
    -14.1 -6.1 0;
    182.7 -5 0;
    214.3 -5 0];
speed = [30;30;30;30];
waittime = [0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

truck1 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [-171.2 5.1 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck1');
waypoints = [-171.2 5.1 0;
    -215 4.6 0];
speed = [-20;-20];
trajectory(truck1, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [-106.8 -11.5 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck2');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-80.9 -11.5 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-48.3 1.8 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car4');
waypoints = [-48.3 1.8 0;
    -217.1 1.4 0];
speed = [-20;-20];
trajectory(car4, waypoints, speed);

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 1, ...
    'Width', 1, ...
    'Position', [101.8 -11.2 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'tumble weed');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 1, ...
    'Width', 1, ...
    'Position', [138.9 11.7 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'tumble weed1');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 1, ...
    'Width', 1, ...
    'Position', [186.5 -13 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'tumble weed2');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 1, ...
    'Width', 1, ...
    'Position', [193.8 2.7 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'tumble weed3');

truck3 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [161.2 -0.1 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0 114 189] / 255, ...
    'Name', 'Truck3');
waypoints = [161.2 -0.1 0;
    213.3 -0.3 0];
speed = [-5;-5];
trajectory(truck3, waypoints, speed);

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [129.7 -1.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Car5');
waypoints = [129.7 -1.5 0;
    214.2 -1.5 0];
speed = [-5;-5];
trajectory(car5, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [188.6 10.3 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Truck4');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [163.39 -8.14 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', '768 LEXK');

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
else
    output = 'Objects only';
end

